# Function for the constant interpolation
def constant_interpolation(qq, pp, x_interp):
    result = np.zeros_like(x_interp)
    result[x_interp < qq[0]] = pp[0]  # Assign the first value of pp to x_interp < qq[0]
    for i, xi in enumerate(qq):
        mask = (x_interp >= xi)
        if i < len(qq) - 1:
            result[mask] = pp[i + 1]
        else:
            result[mask] = pp[-1]
    return result

# Definition of the L1 distance
def l1_distance(qq, pp, qq1, pp1, diferencias, qq_combinada):
  distancia_l1 = 0
  y1 = constant_interpolation(qq, pp, (np.array(qq_combinada[1:]) + np.array(qq_combinada[0:-1])) / 2)
  y2 = constant_interpolation(qq1, pp1, (np.array(qq_combinada[1:]) + np.array(qq_combinada[0:-1])) / 2)
  distancia_l1 = np.sum(np.abs(y1 - y2) * diferencias)

  return distancia_l1
